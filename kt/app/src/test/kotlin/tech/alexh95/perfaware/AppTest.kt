/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package tech.alexh95.perfaware

import org.junit.jupiter.api.DynamicTest
import org.junit.jupiter.api.TestFactory
import java.io.File
import kotlin.test.assertEquals

class AppTest {

    companion object {
        fun getTestFiles(): Map<String, Pair<File, File>> {
            return File(Thread.currentThread().contextClassLoader.getResource("assembly")!!.file).listFiles()
                .groupBy { if (it.name.contains('.')) it.name.substring(0, it.name.indexOf('.')) else it.name  }
                .map { Pair(it.key, Pair(it.value[0], it.value[1])) }.toMap()
        }
    }

    @TestFactory
    fun testDisassemblyMatchesSource(): List<DynamicTest> {
        return getTestFiles().map { (listing, testFiles) ->
            DynamicTest.dynamicTest("Test file: $listing") {
                checkDisassembledMatchesSource(testFiles.first, testFiles.second)
            }
        }
    }

    private fun checkDisassembledMatchesSource(assembledFile: File, sourceFile: File) {
        println("Testing file: ${assembledFile.name}")
        val disassembledCode = disassemble8086(assembledFile)
        println("Expected (Original)\n################")
        println(sourceFile.readLines().joinToString("\n"))
        println("Disassembled (Actual)\n################")
        println(disassembledCode)

        val expectedLines = sourceFile.readLines()
        val actualLines = disassembledCode.split("\n")
        assertEquals(expectedLines, actualLines)
    }

}
